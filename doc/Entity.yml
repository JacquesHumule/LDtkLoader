title: Entity
filename: LDtkLoader/Entity.hpp
classes:
  - name: Entity
    desc: |
      Represents an Entity instance.

      > [!TIP]
      > To get the correct sprite data of the Entity as it is shown in the editor,
      > you should use `hasSprite` to check if the Entity has a sprite,
      > and then `getTexturePath` and `getTextureRect` to get the texture data.
    parent: FieldsContainer

    fields:
      layer:
        decl: const Layer* const layer
        desc: Pointer to the Layer object that contains the Entity.

      iid:
        decl: const std::string ldtk::Entity::iid
        desc: Unique instance ID of the Entity.

    methods:
      getName:
        - decl: ldtk::Entity::getName() const -> const std::string&
          desc: Returns the name of the Entity.

      getSize:
        - decl: ldtk::Entity::getSize() const -> const ldtk::IntPoint&
          desc: Returns the size in pixels of the Entity.

      getColor:
        - decl: ldtk::Entity::getColor() const -> const ldtk::Color&
          desc: Returns the color of the Entity.

      getPosition:
        - decl: ldtk::Entity::getPosition() const -> const ldtk::IntPoint&
          desc: |
            Returns the position in pixels of the Entity relative to the parent Layer.

            If the layer has an offset different than (0, 0), the layer's total offset should be
            added to get the position in pixels relative to the parent Level :

            ```c++
            auto entity_level_pos = entity.getPosition() + entity.layer->getOffset();
            ```

      getGridPosition:
        - decl: ldtk::Entity::getGridPosition() const -> const ldtk::IntPoint&
          desc: Returns the position in grid coordinates of the Entity.

      getWorldPosition:
        - decl: ldtk::Entity::getWorldPosition() const -> const ldtk::IntPoint&
          desc: Returns the computed position in pixels of the Entity relative to the World.

      getPivot:
        - decl: ldtk::Entity::getPivot() const -> const ldtk::FloatPoint&
          desc: Returns the pivot of the Entity, a point from (0.f, 0.f) to (1.f, 1.f).

      hasSprite:
        - decl: ldtk::Entity::hasSprite() const -> bool
          desc: Returns true if the Entity has a sprite associated to it, returns false otherwise.

      getTexturePath:
        - decl: ldtk::Entity::getTexturePath() const -> const std::string&
          desc: Returns the path to the texture of the sprite. Returns an empty string if the Entity has no sprite.

      getTextureRect:
        - decl: ldtk::Entity::getTextureRect() const -> const ldtk::IntRect&
          desc: Returns the texture rectangle of this Entity's sprite.

      hasNineSlice:
        - decl: ldtk::Entity::hasNineSlice() const -> bool
          desc: Returns true if the Entity's sprite has a 9-slices scaling, returns false otherwise.

      getNineSliceBorders:
        - decl: ldtk::Entity::getNineSliceBorders() const -> const ldtk::NineSliceBorders&
          desc: Returns the Entity's 9-slices borders. See NineSliceBorders.

      hasTag:
        - decl: ldtk::Entity::hasTag(const std::string&) const -> bool
          desc: Returns `true` if the Entity has the given tag, returns `false` otherwise.

      allTags:
        - decl: ldtk::Entity::allTags() const -> const std::vector<std::string>&
          desc: Returns a vector containing all tags of the Entity.

