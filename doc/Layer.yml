title: Layer
filename: LDtkLoader/Layer.hpp
classes:
  - name: Layer
    desc: A Layer is a part of a Level and can contain Tiles or Entities
    fields:
      level:
        decl: const ldtk::Level* ldtk::Layer::level
        desc: Pointer to the Level object that contains the Layer.
      
      iid:
        decl: const std::string ldtk::Layer::iid
        desc: Unique instance ID of the Layer.

    methods:
      getType:
        - decl: ldtk::Layer::getType() const -> const ldtk::LayerType&
          desc: Returns the type of the Layer (IntGrid, Entities, Tiles or AutoLayer).

      getName:
        - decl: ldtk::Layer::getName() const -> const std::string&
          desc: Returns the name of the Layer.

      isVisible:
        - decl: ldtk::Layer::isVisible() const -> bool
          desc: Returns `true` if the Layer is visible in the editor, `false` otherwise.

      getCellSize:
        - decl: ldtk::Layer::getCellSize() const -> int
          desc: Returns the size of grid cells (cell_size x cell_size).

      getGridSize:
        - decl: ldtk::Layer::getGridSize() const -> const ldtk::IntPoint&
          desc: Returns the size of the grid in cells (the width and height of the level in cells number, not in pixel).

      getOffset:
        - decl: ldtk::Layer::getOffset() const -> const ldtk::IntPoint&
          desc: Returns Layer total offset in pixels.

      getOpacity:
        - decl: ldtk::Layer::getOpacity() const -> float
          desc: Returns Layer opacity.

      hasTileset:
        - decl: ldtk::Layer::hasTileset() const -> bool
          desc: Returns `true` if the Layer has a Tileset, `false` otherwise.

      getTileset:
        - decl: ldtk::Layer::getTileset() const -> const ldtk::Tileset&
          desc: |
            Returns the Tileset used by the Layer.

            Throws an `invalid_argument` exception if Layer does not have a Tileset.

      allTiles:
        - decl: ldtk::Layer::allTiles() const -> const std::vector<ldtk::Tile>&
          desc: Returns a vector containing all the Tiles in the Layer, ordered correctly.

      getTile:
        - decl: ldtk::Layer::getTile(int x, int y) const -> const Tile&
          desc: |
            Returns the Tile located at (x, y) grid position.

            Returns `ldtk::Tile::None` if there is none.

      getIntGridValue:
        - decl: ldtk::Layer::getIntGridValue(int x, int y) const -> const IntGridValue&
          desc: |
            Returns the IntGrid value located at (x, y) grid position.

            Returns `ldtk::IntGridValue::None` if there is none.

      hasEntity:
        - decl: ldtk::Layer::hasEntity(const std::string& name) const -> bool
          desc: Returns `true` if Layer has an Entity with the provided name, returns `false` otherwise.

      allEntities:
        - decl: ldtk::Layer::allEntities() const -> const std::vector<Entity>&
          desc: Returns a vector containing all Entities of the Layer.

      getEntitiesByName:
        - decl: |
            ldtk::Layer::getEntitiesByName(const std::string& name) const -> const std::vector<std::reference_wrapper<Entity>>&
          desc: |
            Returns a vector containing reference wrappers of Entities named `<name>`.

            Because the returned vector contains reference wrappers, using `auto` won't work like expected, you have to explicitly specify the type when iterating :

            ```c++
            for (const ldtk::Entity& door : layer.getEntitiesByName("Door")) {
                // ...
            }
            ```

      getEntitiesByTag:
        - decl: |
            ldtk::Layer::getEntitiesByTag(const std::string& tag) const -> const std::vector<std::reference_wrapper<Entity>>&
          desc: |
            Returns a vector containing reference wrappers of Entities tagged with the provided tag name.

            Because the returned vector contains reference wrappers, using `auto` won't work like expected, you have to explicitly specify the type when iterating :

            ```c++
            for (const ldtk::Entity& actionable : layer.getEntitiesByTag("actionable")) {
                // ...
            }
            ```
