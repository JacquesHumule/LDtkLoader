title: Enum
filename: LDtkLoader/Enum.hpp
structs:
  - name: Enum
    parent: TagsContainer
    desc: ""
    fields:
      name:
        decl: const std::string ldtk::Enum::name
        desc: Name of the Enum.

      uid:
        decl: const int ldtk::Enum::uid
        desc: Unique identifier of the Enum.

    methods:
      operator[]:
        - decl: |
            ldtk::Enum::operator[](const std::string&) const -> const ldtk::EnumValue&
          desc: |
            Returns the EnumValue matching the provided name.

            If no EnumValue is found, an `invalid_argument` exception is thrown.

      hasIcons:
        - decl: ldtk::Enum::hasIcons() const -> bool
          desc: Returns true if the Enum has icons, returns false otherwise.

      getIconsTileset:
        - decl: ldtk::Enum::getIconsTileset() const -> const ldtk::Tileset&
          desc: Returns the Tileset used by this Enum's icons.

  - name: EnumValue
    desc: ""
    fields:
      name:
        decl: const std::string ldtk::EnumValue::name
        desc: Name of the EnumValue.

      color:
        decl: const ldtk::Color ldtk::EnumValue::color
        desc: Color of the EnumValue.

      type:
        decl: const ldtk::Enum& ldtk::EnumValue::type
        desc: |
          Enum object owning this EnumValue.

          Allows to access the name of the Enum, for example :

          ```c++
          const auto& enum_value = project.getEnum("Items")["SilverSword"];

          std::cout << enum_value.type.name;
          // output: Items
          ```

    methods:
      hasIcon:
        - decl: ldtk::EnumValue::hasIcon() const -> bool
          desc: |
            Returns true if the EnumValue has an icon, returns false otherwise.

      getIconTileset:
        - decl: ldtk::EnumValue::getIconTileset() const -> const ldtk::Tileset&
          desc: Returns the Tileset of the icon.

      getIconTextureRect:
        - decl: ldtk::EnumValue::getIconTextureRect() const -> const ldtk::IntRect&
          desc: Returns the texture rectangle of this EnumValue's icon.
